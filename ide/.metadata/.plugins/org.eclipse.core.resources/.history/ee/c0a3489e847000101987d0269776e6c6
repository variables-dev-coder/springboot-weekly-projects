package com.munna.urlshortener.controller;

import com.munna.urlshortener.dto.ClickStatsDto;
import com.munna.urlshortener.entity.UrlMapping;
import com.munna.urlshortener.repository.UrlMappingRepository;
import com.munna.urlshortener.service.UrlShortenerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.*;

@RestController
@RequestMapping("/")
public class UrlShortenerController {

    @Autowired
    private UrlShortenerService service;

    @Autowired
    private UrlMappingRepository urlMappingRepository;

    // POST: Create short URL
    @PostMapping("/shorten")
    public ResponseEntity<String> shortenUrl(@RequestBody Map<String, String> request) {
        String originalUrl = request.get("url");
        String shortUrl = service.shortenUrl(originalUrl);
        return ResponseEntity.ok(shortUrl);
    }

    // GET: Redirect to original URL
    @GetMapping("/{shortUrlCode}")
    public ResponseEntity<Void> redirect(@PathVariable String shortUrlCode) {
        Optional<UrlMapping> mapping = urlMappingRepository.findByShortUrl(shortUrlCode);
        if (mapping.isPresent()) {
            UrlMapping urlMapping = mapping.get();
            urlMapping.setClickCount(urlMapping.getClickCount() + 1);
            urlMappingRepository.save(urlMapping);

            URI uri = URI.create(urlMapping.getOriginalUrl());
            HttpHeaders headers = new HttpHeaders();
            headers.setLocation(uri);
            return new ResponseEntity<>(headers, HttpStatus.FOUND);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    // GET: All mappings
    @GetMapping("/all")
    public ResponseEntity<List<UrlMapping>> getAll() {
        return ResponseEntity.ok(service.getAll());
    }

    // PUT: Update original URL
    @PutMapping("/update/{id}")
    public ResponseEntity<UrlMapping> updateUrl(@PathVariable Long id, @RequestBody Map<String, String> request) {
        String newUrl = request.get("url");
        return ResponseEntity.ok(service.updateUrl(id, newUrl));
    }

    // DELETE: Remove mapping
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<Void> deleteUrl(@PathVariable Long id) {
        service.deleteUrl(id);
        return ResponseEntity.noContent().build();
    }

    // GET: Custom click stats
    @GetMapping("/clicks/{shortUrlCode}")
    public ResponseEntity<ClickStatsDto> getClickStats(@PathVariable String shortUrlCode) {
        Optional<UrlMapping> mapping = urlMappingRepository.findByShortUrl(shortUrlCode);
        if (mapping.isPresent()) {
            UrlMapping url = mapping.get();
            ClickStatsDto dto = new ClickStatsDto(
                url.getShortUrl(),
                url.getOriginalUrl(),
                url.getClickCount(),
                url.getCreatedAt()
            );
            return ResponseEntity.ok(dto);
        } else {
            return ResponseEntity.notFound().build();
