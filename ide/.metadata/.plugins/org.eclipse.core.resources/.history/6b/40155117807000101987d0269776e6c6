package com.munna.urlshortener.controller;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.munna.urlshortener.entity.UrlMapping;
import com.munna.urlshortener.service.UrlShortenerService;

import jakarta.servlet.http.HttpServletResponse;

@RestController
@RequestMapping("/")
public class UrlShortenerController {

    @Autowired
    private UrlShortenerService service;

    @PostMapping("/shorten")
    public ResponseEntity<String> shortenUrl(@RequestBody Map<String, String> request) {
        String originalUrl = request.get("url");
        String shortUrl = service.shortenUrl(originalUrl);
        return ResponseEntity.ok(shortUrl);
    }

    @GetMapping("/{shortUrlCode}")
    public void redirect(@PathVariable String shortUrlCode, HttpServletResponse response) throws IOException {
        System.out.println("Redirect request received for: " + shortUrlCode);
        String originalUrl = service.getOriginalUrl(shortUrlCode);

        if (originalUrl != null) {
            System.out.println("Redirecting to: " + originalUrl);
            response.sendRedirect(originalUrl);
        } else {
            response.sendError(HttpServletResponse.SC_NOT_FOUND, "Short URL not found");
        }
    }

    // Correctly placed CRUD methods below

    @GetMapping("/all")
    public ResponseEntity<List<UrlMapping>> getAll() {
        return ResponseEntity.ok(service.getAll());
    }

    @PutMapping("/update/{id}")
    public ResponseEntity<UrlMapping> updateUrl(@PathVariable Long id, @RequestBody Map<String, String> request) {
        String newUrl = request.get("url");
        return ResponseEntity.ok(service.updateUrl(id, newUrl));
    }

    @DeleteMapping("/delete/{id}")
    public ResponseEntity<Void> deleteUrl(@PathVariable Long id) {
        service.deleteUrl(id);
        return ResponseEntity.noContent().build();
    }
}
