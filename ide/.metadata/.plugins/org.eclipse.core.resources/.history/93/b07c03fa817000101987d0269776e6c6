package com.munna.urlshortener.controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.munna.urlshortener.entity.UrlMapping;
import com.munna.urlshortener.service.UrlShortenerService;

@RestController
@RequestMapping("/")
public class UrlShortenerController {

    @Autowired
    private UrlShortenerService service;

    // Shorten URL
    @PostMapping("/shorten")
    public ResponseEntity<String> shortenUrl(@RequestBody Map<String, String> request) {
        String originalUrl = request.get("url");
        String shortUrl = service.shortenUrl(originalUrl);
        return ResponseEntity.ok(shortUrl);
    }

    // Redirect using short code
    @GetMapping("/{shortUrlCode}")
    public ResponseEntity<Void> redirect(@PathVariable String shortUrlCode) {
        Optional<URLMapping> mapping = urlMappingRepository.findByShortUrl(shortUrlCode);

        if (mapping.isPresent()) {
            URLMapping urlMapping = mapping.get();
            
            //Increment click count
            urlMapping.setClickCount(urlMapping.getClickCount() + 1);
            urlMappingRepository.save(urlMapping);
            
            HttpHeaders headers = new HttpHeaders();
            headers.setLocation(URI.create(urlMapping.getOriginalUrl()));
            return new ResponseEntity<>(headers, HttpStatus.FOUND); // 302
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    // Get all URL mappings
    @GetMapping("/all")
    public ResponseEntity<List<UrlMapping>> getAll() {
        return ResponseEntity.ok(service.getAll());
    }

    // Update original URL
    @PutMapping("/update/{id}")
    public ResponseEntity<UrlMapping> updateUrl(@PathVariable Long id, @RequestBody Map<String, String> request) {
        String newUrl = request.get("url");
        return ResponseEntity.ok(service.updateUrl(id, newUrl));
    }

    // Delete mapping by ID
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<Void> deleteUrl(@PathVariable Long id) {
        service.deleteUrl(id);
        return ResponseEntity.noContent().build();
    }
    
    @GetMapping("/clicks/{shortUrlCode}")
    public ResponseEntity<Integer> getClickCount(@PathVariable String shortUrlCode) {
        Optional<URLMapping> mapping = urlMappingRepository.findByShortUrl(shortUrlCode);

        if (mapping.isPresent()) {
            int clicks = mapping.get().getClickCount();
            return ResponseEntity.ok(clicks);
        } else {
            return ResponseEntity.notFound().build();
        }
}
